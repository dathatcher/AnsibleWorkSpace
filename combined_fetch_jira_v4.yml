- name: Fetch and filter GitHub branches, then query Jira and send email
  hosts: localhost
  gather_facts: no
  vars:
    jira_base_url: "https://davidaustinthatcher.atlassian.net" 
    jira_api_token: "{{ lookup('env', 'JIRA_API_TOKEN') }}"
    jira_user_email: "{{ lookup('env', 'JIRA_USER_EMAIL') }}"
    branch_prefix: "SCRUM-1"  # Prefix to search for in GitHub branches
    custom_field_id: "customfield_10039"  # Replace with your actual custom field ID
    email_recipient: "{{ lookup('env', 'TO_EMAIL') }}"  # Change this to the email recipient
    smtp_server: "smtp.gmail.com"
    smtp_port: 587
    smtp_username: "{{ lookup('env', 'JIRA_USER_EMAIL') }}"  # Your Gmail address
    smtp_password: "{{ lookup('env', 'GMAIL_APP_PASSWORD') }}"  # Your Google App Password

  tasks:
    - name: Clone GitHub Repository
      git:
        repo: "https://github.com/dathatcher/HelloWorld.git"
        dest: "/tmp/github_repo"
        force: yes
      register: repo_clone

    - name: Fetch all remote branches
      shell: |
        cd /tmp/github_repo
        git fetch --all --prune
        git branch -r | sed 's/origin\///g' | awk '{$1=$1;print}'
      register: branch_list

    - name: Extract Jira Ticket Number from Matching Branches
      set_fact:
        jira_tickets: "{{ branch_list.stdout_lines | select('search', '^' + branch_prefix) | map('regex_replace', '^' + branch_prefix + '(\\d+).*', branch_prefix + '\\1') | list }}"

    - name: Fetch Jira Ticket Data for Each Extracted Ticket
      uri:
        url: "{{ jira_base_url }}/rest/api/2/issue/{{ item }}"
        method: GET
        headers:
          Authorization: "Basic {{ (jira_user_email + ':' + jira_api_token) | b64encode }}"
          Accept: "application/json"
        return_content: yes
      register: jira_response
      loop: "{{ jira_tickets }}"
      when: jira_tickets | length > 0

    - name: Extract DB Object Values
      set_fact:
        db_objects: "{{ jira_response.results | map(attribute='json.fields') | map(attribute=custom_field_id, default='Not Set') | list }}"
      when: jira_tickets | length > 0

    - name: Send Email with Jira DB Object Information
      mail:
        host: "{{ smtp_server }}"
        port: "{{ smtp_port }}"
        username: "{{ smtp_username }}"
        password: "{{ smtp_password }}"
        to: "{{ email_recipient }}"
        subject: "DB Objects in Stage Ready for Deployment"
        body: |
          The following DB Objects were extracted from Jira tickets in and delivered to QA:

          {% for item in jira_response.results %}
          Ticket: {{ item.json.key }}
          DB Object Value: {{ item.json.fields[custom_field_id] | default('Not Set') }}
          {% endfor %}

          This is an automated message from Ansible.
        subtype: plain
        secure: starttls
      when: jira_tickets | length > 0
